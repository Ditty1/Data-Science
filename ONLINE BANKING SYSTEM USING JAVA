
ABSTRACT

TOPIC: ONLINE BANKING SYSTEM
This project is aimed at developing an online banking for customers and bank 
staffs. The system is an online application that can be accessed throughout the 
organization and outside as well with proper login provided .The programming 
language used to develop this project is Java.
It is for an online comprehensive solution to manage internet banking .This will 
be accessible to all customers who have a valid user id .This will also helpful for 
the bank employees to easily know about the customer account details using valid 
bank password .This system provides the following facilities for Customers and 
Employees.
For Employees….

 Facility to request for details about the customers who has accounts in the 
bank (Account details, Customer Personal detail and Loan details).
 Facility to request for Customers individual account details and loan details 
using customer id.
 Facility to request for different account details like saving account,current 
account and fixed deposit.
 Facility to request for different loan details like housing loan,vehicle loan.

For Customers….

 Facility to request for account details, customer details and loan details.
 Facility to open account
 Facility to withdraw money.
 Facility to deposit money.
 Facility to balance enquiry

The banking system keeps the all records in a file .so it is easy to retrieve data .It 
can keep the information of Account Type ,Details of account owner ,Details of 
account opening ,deposit , money withdraw and Loan details.
 The running conventional banking system can't be 
considered as an effective banking service. It consumes a lot of time of customers 
as well as bank staffs, ever for a small work. Moreover, it is not secured and fully 
reliable .In order to overcome these drawbacks of conventional banking system, 
it is to be replaced with e-system. Online Banking System Project as an online 
software provides easy, accurate and fast access to banking system

CODE :
package Bank;
import java.time.LocalDate;
import java.io.Serializable;
import java.util.ArrayList;
class IllegalDateException extends Exception {
public IllegalDateException(String msg) {
    super(msg);
}
}

public class Transfer implements Serializable {
	private static final long serialVersionUID = 8991888147100238648L;
    double amount;
    ArrayList<Account> fromaccount;
    ArrayList<Account> toaccount;
    int fromaccountno;
    int toaccountno;
    private LocalDate date;

    public Transfer(int fromaccountno, int toaccountno, double amount, LocalDate date)throws IllegalDateException {
    	
    	
        // Check if date is not in the future
        if (date.isAfter(LocalDate.now())||date.isBefore(LocalDate.now())) {
            throw new IllegalDateException("Invalid Date: Cannot use future dates or past dates.");
        }
    
    	
        this.amount = amount;
        this.fromaccountno = fromaccountno;
        this.toaccountno = toaccountno;

        // Initialize fromaccount and toaccount ArrayLists
        this.fromaccount = new ArrayList<Account>();
        this.toaccount = new ArrayList<Account>();

        // Retrieve the from and to accounts from the Bank object
        for (Account a : Bank.getAccount()) {
            if (a.getAccountnumber() == fromaccountno) {
                this.fromaccount.add(a);
            }
            if (a.getAccountnumber() == toaccountno) {
                this.toaccount.add(a);
            }
        }

        this.date = date;
    }

    public void transfer(int fromaccountno, int toaccountno, double amount) {
        // Find the from and to accounts from the ArrayLists initialized in the constructor
        Account fromaccount = null;
        Account toaccount = null;
        for (Account a : this.fromaccount) {
            if (a.getAccountnumber() == fromaccountno) {
                fromaccount = a;
            }
        }
        for (Account a : this.toaccount) {
            if (a.getAccountnumber() == toaccountno) {
                toaccount = a;
            }
        }

        if (fromaccount != null && toaccount != null) {
            if (amount < fromaccount.getBalance()) {
                fromaccount.setBalance(fromaccount.getBalance() - amount);
                toaccount.setBalance(toaccount.getBalance() + amount);
                System.out.println("Transfer successful!");
                System.out.println("Transferred account balance: " + fromaccount.getBalance());
                System.out.println("Received account balance: " + toaccount.getBalance());
            } else {
                System.out.println("Insufficient account balance: " + fromaccount.getBalance());
            }
        } else {
            System.out.println("Invalid account numbers!");
        }
    }

    public String toString() {
        return "\n"+amount + " amount transferred on " + date + " to account number " + toaccountno+"\n";
    }
}


package Bank;
import java.io.*;
import java.util.ArrayList;

enum AccountType{
	SAVING,CURRENT,FIXEDDEPOSIT;
}

class Account  implements Serializable {

private static final long serialVersionUID = -1544631927505651663L;
private static double saccno=1001;
private double accountnumber;
private AccountType accountType;
private double balance;
private  ArrayList<Loan> loans;
private ArrayList<Customer> customers;
private ArrayList<Transfer> trans;
int e=0;
public Account( AccountType accountType, double balance) {
    this.accountType = accountType;
    this.balance = balance;
	this.loans = new ArrayList<Loan>();
	this.trans=new ArrayList<Transfer>();
    this.customers=new ArrayList<Customer>();
	this.accountnumber=saccno++;
}

public Account() {
	
}
public void setType(AccountType type) {
	this.accountType=type;
}
public void addCustomer(Customer customer) {
        customers.add(customer);
    }
public void addLoan(Loan loan) {
        loans.add(loan);
    }
public void addTransfer(ArrayList<Transfer> tra) {
    trans.addAll(tra);
}
public ArrayList<Transfer> getTransfer() {
    return trans;
}
public ArrayList<Loan> getLoans() {
        return loans;
    }
public ArrayList<Customer> getCustomers() {
        return customers;
    }
public AccountType getAccountType() {
    return accountType;
}
public double  getAccountnumber() {
    return accountnumber;
}
public double getBalance() {
    return balance;
}
public String toString(){
    return "\n"+"accno="+accountnumber+", accounttype="+accountType+", customer name"+getCustomers()+",balance"+balance+", loan"+getLoans();

}
public void setBalance(double d) {
	 this.balance = d;
	
}

public void addCustomer(ArrayList<Customer> arrayList) {
	
	customers.addAll(arrayList);
}

public void addLoan(ArrayList<Loan> lon) 
{
	loans.addAll(lon);
	
}


}
package Bank;

import java.io.Serializable;

public class Address implements Serializable {
	
	private static final long serialVersionUID = 8678988354728212757L;
	String Housename,city,state,country;
	public Address(String Housename,String city,String state,String country) {
		this.Housename=Housename;
		this.city=city;
		this.state=state;
		this.country=country;
	}


public String toString(){
    return "Housename :"+Housename + "\t "+ "city :"+ city +"\t"+ "state :"+ state+"\t" +"country :"+ country;
   
}}

package Bank;

import java.io.Serializable;
import java.util.ArrayList;

class Bank implements Serializable {
   
	private static ArrayList<Account> accounts;

    public Bank() {
        this.accounts = new ArrayList<Account>();
    }

    public void addAccount(ArrayList<Account> account1,ArrayList<Account> account2,ArrayList<Account> account3) {
        accounts.addAll(account1);
       accounts.addAll(account2);
        accounts.addAll(account3);
        
    }
    
    public static ArrayList<Account> getAccount (){
		return accounts;
	}
    public void printAccounts() {
        for (Account account : accounts) {
            System.out.println(account);
        }
    }

	public void addAccount(ArrayList<Account> ac) {
		accounts.addAll(ac);
		
}

	

	
	
 } 


package Bank;

import java.io.Serializable;
/*class IllegalPhoneNumberException extends Exception {
    public IllegalPhoneNumberException(String msg) {
        super(msg);
    }
}*/
class Customer implements Serializable {


	private static final long serialVersionUID = 4361238761477305188L;
private static double caccno=0;	
private String name;
private int age;
private Address address;
private String contactNumber;
private double customerId;
boolean found;

public Customer(String name, int age, Address address, String contactNumber,double customerId) {  //throws IllegalPhoneNumberException {
	        /*if (contactNumber.length() != 10) {
	            throw new IllegalPhoneNumberException("Invalid Phone Number. Please enter 10 digit phone number.");
	        }*/
    this.name = name;
    this.age = age;
    this.address = address;
    this.contactNumber = contactNumber;
    this.customerId=caccno++;
    this.customerId=customerId;
    
	
}
public Customer(String name, int age, Address address, String contactNumber) {
    this.name = name;
    this.age = age;
    this.address = address;
    this.contactNumber = contactNumber;
    this.customerId=caccno++;
   
    
	
}

public Customer() {
	// TODO Auto-generated constructor stub
}

public String getName() {
    return name;
}

public int getAge() {
    return age;
}

public Address getAddress() {
    return address;
}

public String getContactNumber() {
    return contactNumber;
}

public double  getCustomerId() {
    return customerId;
}
public String toString(){
    return "name :"+name + "\t "+ "customerId :"+ customerId +"\t"+ "age :"+ age+"\t" +"contact :"+ contactNumber+"\t" +"Address :"+address;
   
}

}

package Bank;

import java.io.Serializable;
import java.util.ArrayList;

class Housing implements Serializable{
 

private ArrayList<Loan> loans;

public Housing() {
    this.loans = new ArrayList<Loan>();
}

public void addLoan(ArrayList<Loan> loans1,ArrayList<Loan> loans2,ArrayList<Loan> loans3) {
    loans.addAll(loans1);
    loans.addAll(loans2);
    loans.addAll(loans3);
}

public ArrayList<Loan> getLoan (){
	return loans;
}
public void printLoans() {
    for (Loan loan : loans) {
        System.out.println(loan);
    }
}

public void addLoan(ArrayList<Loan> loa4) {
	
	loans.addAll(loa4);
}}
package Bank;

import java.io.Serializable;

enum LoanType{
	VEHICLE(0.06),HOUSING(0.05),PERSONAL(0.07);

private double interestRate;

 LoanType(double interestRate) {
	this.interestRate=interestRate;
}
public double getInterestRate() {
	
    return this.interestRate;
}
}
class Loan implements Serializable {
/**
	 * 
	 */
	private static final long serialVersionUID = 5180088589234367873L;
private LoanType loanType;
protected double loanAmount;
private static int saccno=1;
protected double interestRate;
protected int year;
private double interestAmount;
private double amountwithinterestAmount;
double a = 0;
int e=0;
LoanType lo;
int id;
public Loan(LoanType loanType, double loanAmount,int year) {
    this.loanType = loanType;
    this.loanAmount = loanAmount;
    this.year=year;
    this.id=saccno++;
}

public Loan() {
	    this.loanType = loanType;
	    this.loanAmount = loanAmount;
	   
	    this.year=year;
}

 
public LoanType getLoanType() {
    return loanType;
}
public void setType(LoanType type) {
	this.loanType=type;
}
public int getYear() {
    return year;
}
public double getLoanAmount() {
    return loanAmount;
}

public double getInterestRate() {
	
	
		
       if(loanType==LoanType.HOUSING) {
    	    a=LoanType.HOUSING.getInterestRate();
    	    
       }
       else if(loanType==LoanType.VEHICLE ) {
    	    a=LoanType.VEHICLE.getInterestRate();
       
	}
       else if(loanType==LoanType.PERSONAL ) {
   	    a=LoanType.PERSONAL.getInterestRate();
      
	}
       else {
    	   System.out.println("invalid");
       }
	return a;
}
public double  getLoanid() {
    return id;
}
/*public void setInterestAmount() {
	this.interestAmount=(getLoanAmount()*getInterestRate()*getYear());
	
}
public double getinterestAmount() {
	return interestAmount;
}
public void setamountwithinterestAmount() {
	this.amountwithinterestAmount=(getinterestAmount()+getLoanAmount());
}
public double getAmountwithinterestAmount() {
	return amountwithinterestAmount;
}
 */

public String toString(){
	
    return "\n"+String.valueOf(loanType)+"\nid"+id+"\n"+"loan amount"+ loanAmount+"\t"+"loan for years"+year+"\t"+"interest"+getInterestRate();


}

public void setLoanAmount(double d) {
	
	this.loanAmount = d;
}
}

package Bank;

import java.util.*;
import java.util.Map.Entry;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.RandomAccessFile;
import java.time.LocalDate;


public class MyBank   {
	
      // private static String type;

	@SuppressWarnings("unchecked")
	public static void main(String[] args ) {
       Scanner sc = new Scanner(System.in);
      
      
// Creating 3 customers
          Bank ban=new  Bank ();
//creating map         
          HashMap<Integer,Customer> cus =new HashMap<Integer,Customer> ();
          HashMap<Integer,ArrayList<Loan>> loa1 =new HashMap<Integer,ArrayList<Loan>> ();
          HashMap<Integer,ArrayList<Account>> acc =new HashMap<Integer,ArrayList<Account>> ();
          Set<Map.Entry<Integer,ArrayList<Account>>> set1 = acc.entrySet();
          Set<Map.Entry<Integer,Customer>> set = cus.entrySet();
          Set<Map.Entry<Integer,ArrayList<Loan>>> set2 = loa1.entrySet();

          
          
          
          
          
//creating customer arraylist          
          
       // ArrayList<Customer> c1=new ArrayList<Customer>();
         // try {
              Address address1=new Address("Maliyekal house","Thrissur","Kerala","India");
              Address address2=new Address("Pannampalli house","Idukki","Kerala","India");
              Address address3=new Address("Poovathinkal house","Thrissur","Kerala","India");
        	  Customer cus1=new Customer("John ", 25, address1, "8590867641",1);
              Customer cus2=new Customer("Mani ", 29, address2, "1234567892",2);
              Customer cus3=new Customer("Sruthi ", 59, address3, "1234567892",3);
			
		//} catch (IllegalPhoneNumberException e) {
			
			//e.printStackTrace();
		//}
          
          
          cus.put(1,cus1 );
          cus.put(2,cus2 );
          cus.put(3,cus3 );
 //creating loan arraylist             
          
          ArrayList<Loan> lon1=new ArrayList<Loan>();
          ArrayList<Loan> lon2=new ArrayList<Loan>();
          ArrayList<Loan> lon3=new ArrayList<Loan>();     
         
          
          
          lon1.add( new Loan(LoanType.HOUSING, 100000.00,5));
         // lon1.add( new Loan(LoanType.VEHICLE, 100000.00,4));
          lon2.add( new Loan(LoanType.HOUSING, 200000.00,1));
          lon2.add( new Loan(LoanType.VEHICLE, 100055.00, 5));
          lon3.add( new Loan(LoanType.HOUSING, 300000.00, 5));
          lon3.add( new Loan(LoanType.VEHICLE, 100045.00, 6));
          
          
          Housing ho=new Housing();
          ho.addLoan(lon1,lon2,lon3);
        
          
          loa1.put(1, lon1);
          loa1.put(2, lon2);
          loa1.put(3, lon3);
         
//creating account arraylist      
          
          ArrayList<Account> account1 = new ArrayList<Account>();
          ArrayList<Account> account2 = new ArrayList<Account>();
          ArrayList<Account> account3 = new ArrayList<Account>();
          
     
		  account1.add(new Account(AccountType.SAVING, 7000));
		  account1.add(new Account(AccountType.CURRENT, 15000));
		  account1.add(new Account(AccountType.FIXEDDEPOSIT,12222));
		  account2.add(new Account(AccountType.CURRENT, 1567));
		  account2.add(new Account(AccountType.FIXEDDEPOSIT ,12666));
		  account3.add(new Account(AccountType.CURRENT, 1567));
		  account3.add(new Account(AccountType.FIXEDDEPOSIT ,12666));
		  
		  
		  
//adding customer and loan to accounts		  
		 
		  //1
		 for (Account c : account1) {
             c.addCustomer(cus1);    
             c.addLoan(lon1);    
               
         }
		 
		  
		  //2
		  
		  for (Account c : account2) {
	             c.addCustomer(cus2);
	             c.addLoan(lon2);
	             
	         }
		  
		  //3
		  
		   
		  for (Account c : account3) {
	             c.addCustomer(cus3);
	             c.addLoan(lon3);
	            
	         }
		  
//adding accounts to bank	  
		  ban.addAccount(account1,account2,account3);         
		  
		  acc.put(1001, account1);
		  acc.put(1002, account2);
		  acc.put(1003, account3);
		  
		  
		 
		  try {
			  File file=new File("Account.txt");
			  FileOutputStream fos = new FileOutputStream(file,true);
			  ObjectOutputStream oos = new ObjectOutputStream(fos);
			  oos.writeObject( acc);
			 
	          oos.flush();
			  oos.close();
			  fos.close();
			  }
			  catch(IOException e) {
			  	e.printStackTrace();
			  }
		  
		  try {
			  File file1=new File("Customer.txt");
			  FileOutputStream fos1 = new FileOutputStream(file1,true);
			  ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
			 // oos.writeObject( acc);
			  oos1.writeObject( cus);
			 // oos.writeObject( loa1);
	          oos1.flush();
			  oos1.close();
			  
			  }
			  catch(IOException e) {
			  	e.printStackTrace();
			  }  
	            
		  try {
			  File file2=new File("Loan.txt");
			  FileOutputStream fos2 = new FileOutputStream(file2,true);
			  ObjectOutputStream oos2 = new ObjectOutputStream(fos2);
			  //oos.writeObject( acc);
			  //oos.writeObject( cus);
			  oos2.writeObject( loa1);
	          oos2.flush();
			  oos2.close();
			  
			  }
			  catch(IOException e) {
			  	e.printStackTrace();
			  }
	      
          
        
//getting data
		  try {
				
              FileInputStream fis = new FileInputStream("Account.txt");
              ObjectInputStream ois = new ObjectInputStream(fis);
             
              FileInputStream fis1 = new FileInputStream("Customer.txt");
              ObjectInputStream ois1 = new ObjectInputStream(fis1);
              
              FileInputStream fis2 = new FileInputStream("Loan.txt");
              ObjectInputStream ois2 = new ObjectInputStream(fis2);
              
              
               HashMap<Integer,ArrayList<Account>> acc1 =new HashMap<Integer,ArrayList<Account>> ();
               HashMap<Integer,ArrayList<Loan>> loa11 =new HashMap<Integer,ArrayList<Loan>> ();
               HashMap<Integer, Customer> cus21 =new HashMap<Integer,Customer> ();
               acc1 = (HashMap<Integer,ArrayList<Account>>)ois.readObject();
               loa11 = (HashMap<Integer,ArrayList<Loan>>)ois2.readObject();
               cus21 = (HashMap<Integer,Customer>)ois1.readObject();
               ois.close();
               Set<Map.Entry<Integer,Customer>> customer = cus21.entrySet();
               Set<Map.Entry<Integer,ArrayList<Account>>> account = acc1.entrySet();
               Set<Map.Entry<Integer,ArrayList<Loan>>> loan = loa11.entrySet();
		  
		  
int choice; 
int x = 0;   
int m,w,u,p;
boolean found;
int password=1234;
String d;



do {
	
System.out.println("1. IF EMPLOYEE");
System.out.println("2. IF CUSTOMER");
System.out.println("0.Exit");


System.out.println("Enter your choice: ");
w=sc.nextInt();
 



switch(w) {

case 1:
	
	System.out.println("ENTER  PASSWORD");
	p=sc.nextInt();
	

	if(p==password) {
		
		
	  do{
	     
         
         System.out.println("\n"+"MyBank Menu");
         System.out.println("1. DETAIL OF  All CUSTOMER");
         System.out.println("2. DETAIL OF  Account and loans of each customer");
         System.out.println("3. DETAIL OF  Account ");
         System.out.println("4. DETAIL OF  loans");
         System.out.println("5.ALL DETAILS OF A CUSTOMER");
         System.out.println("6.TRANSACTION HISTORY OF ONE ACCOUNT");
         System.out.println("0. Exit");
         
         System.out.println("Enter your choice: ");
         choice = sc.nextInt();
         
	     switch(choice){
			
		    case 1:
		    	 
		                 for(Map.Entry<Integer,ArrayList<Account>> me9 : account) 
		                	 
			              System.out.println(me9.getValue());

		                   
		    	
				//ban.printAccounts();
                break;
             
            case 2:
				System.out.println("enter customerId number:");
				x= sc.nextInt();
				
				for(Map.Entry<Integer,Customer> me : customer) 
				
				if(x==me.getKey()){
					
	                System.out.println("a. print Customer Details");
                    System.out.println("b. print Account DETAIL");
                    System.out.println("c. print Loan");
                    System.out.println("0. Exit");
                    
				
                    System.out.print("Enter your choice: ");
                    d = sc.next();
			
			
			
			            switch(d){
				            case "a":
					              System.out.println("enter customerId number:");
    				              int o= sc.nextInt();
					                  
    				                 
    				             
	                             
	                                         if(o==me.getKey()) {
	                    	                     System.out.println(me.getValue());

	                                         }
				
                                  break;
			            
				              case "b":
				
				            	  System.out.println("enter account id:");
    				              int o1= sc.nextInt();
    				              
				
				          
				              
                               for(Map.Entry<Integer,ArrayList<Account>> me1 : account) 
                                  if(o1==me1.getKey()) {
             	                     System.out.println(me1.getValue());

					             }

					         
             break;
             
             
			case "c":
				 System.out.println("enter customer id:");
	              int o2= sc.nextInt();
	              

          

              for(Map.Entry<Integer,ArrayList<Loan>> me2 : loan) 
                 if(o2==me2.getKey()) {
                     System.out.println(me2.getValue());

	             }

	        
            		
				
            break;
             
			default:
			    System.out.println("UNKNOWN");
			break;
			}
			            
			           
				}
		    
			else{
				 System.out.println("not found");
			}
				
				
			break;
			
			
			
			
			
        case 3:
        	System.out.println("1. DETAIL SAVING ACCOUNT");
        	System.out.println("2. DETAIL OF  CURRENT");
        	System.out.println("3. DETAIL OF  FIXED DEPOSITE");
        	System.out.println("0. exit");
        	System.out.print("Enter your choice: ");
            int h = sc.nextInt();
            
            switch(h) {
            case 1:
            	for(Account P:ban.getAccount()) {
                	if(P.getAccountType()==AccountType.SAVING)
                	{
                		System.out.print(P);
                		
                		
                	}
                	}
            	
            	break;
            case 2:
            	for(Account P:ban.getAccount()) {
                	if(P.getAccountType()==AccountType.CURRENT)
                	{
                		
                		System.out.print(P);
                	}
                	}
            	break;
            case 3:
            	for(Account P:ban.getAccount()) {
                	if(P.getAccountType()==AccountType.FIXEDDEPOSIT)
                	{
                		System.out.print(P);
                	}
                	}
            	break;
            default:
            	break;
            	
            }


        	break;
        	
        	
        	
        case 4:
        	System.out.println("1. DETAIL HOUSING LOAN");
        	System.out.println("2. DETAIL OF  VEHICLE LOAN");
        	System.out.println("0. exit");
        	System.out.print("Enter your choice: "); 	
            m = sc.nextInt();
            
           
            switch(m) {
            case 1:
            	
            	/*for(Map.Entry<Integer,ArrayList<Loan>> me9 : set2) 
            	for(Loan p1:me9.getValue())	{
            		if(p1.getLoanType()==LoanType.HOUSING) {
            			System.out.print(me9.getValue());
            		}
            	}*/
            	for(Loan P:ho.getLoan()) {
                	if(P.getLoanType()==LoanType.HOUSING)
                	{
                		System.out.print(P);
                			
                	}
                	}
            	
            	
            	
            	break;
            case 2:
            	for(Loan P:ho.getLoan()) {
                	if(P.getLoanType()==LoanType.VEHICLE)
                	{
                		System.out.print(P);
                			
                	}
                	}
            	break;
            
            default:
            	break;
            	
            }
        
            break;
			
        case 5:
        	System.out.print("Enter Account id: "); 	
            m = sc.nextInt();
           
                 
                 for(Map.Entry<Integer,ArrayList<Account>> me9 : account) 
                    if(m==me9.getKey()) {
	                     System.out.println(me9.getValue());

                   }

         break;
        case 6:
        	
        	System.out.println("--------------TRANSACTION HISTORY----------------");
    		System.out.println("Enter account number");
    		int accountnumber=sc.nextInt();
    		
    		 
    		 for(Map.Entry<Integer,ArrayList<Account>> me1 : account) 
                 
             	for(Account entry :me1.getValue()) {
             		
         			 if(accountnumber==entry.getAccountnumber()) {
         				found=true;
    					System.out.println("Transfer History:"+entry.getTransfer());
         			 }}
        	
        	break;
        	
        	
		default:
		      System.out.println("error");
				break;
				
				
			}
	     
				
		}while(choice>0);
	
	}
	
else {
	System.out.println("invalid password");
}
	
break;
	
	
	
//for customers
	
case 2:
	
	do {
	System.out.println("MyBank Menu");
	System.out.println("1. print Customer Details");
    System.out.println("2. print Account DETAIL");
    System.out.println("3. print Loan Details");
    
    
    System.out.println("4. open account");
    System.out.println("5. deposit");
    System.out.println("6.withdraw");
    System.out.println("7.Amount Transaction ");
    System.out.println("8.Take Loan ");
    System.out.println("9.Loan Payment ");
    System.out.println("10.Balance enquiry ");
    System.out.println("11.Transaction History ");
    System.out.println("0.Exit");
	
   
    System.out.print("Enter your choice: ");
    
	u=sc.nextInt();
	
		String name;
	
		String housename;
		String city;
		String state;
		String country;
	    
		int age;
		
		String contactNumber ;
	
		
	   
		long amount = 0;
	
		int accountnumber;
	
		long amt;
	
	switch(u){
	
	
		case 1:
			System.out.println("enter customerId number:");
            int o= sc.nextInt();
                
               
                    
                    for(Map.Entry<Integer,Customer> me : customer) 
                       if(o==me.getKey()) {
  	                     System.out.println(me.getValue());

	                    }
                        

			
		break;
		
		
		
		
		
	case 2:
		   System.out.println("enter account id:");
           int o1= sc.nextInt();
         

              

                       for(Map.Entry<Integer,ArrayList<Account>> me1 : account) 
                           if(o1==me1.getKey()) {
                           System.out.println(me1.getValue());

                           }

                 
			
		break;
		
		
		
		
		
	case 3:
		 System.out.println("enter customerId number:");
         int o2= sc.nextInt();
         

       

                   for(Map.Entry<Integer,ArrayList<Loan>> me2 : loan) 
                	   if(o2==me2.getKey()) {
                	   
                  		 
                  			System.out.println(me2.getValue());
          					
                  		 }

                     

            
	            	
	break;
		
		
		
		
		
	case 4:
		Integer i=1007;
		Integer a=3;
		Integer j=1003;
			System.out.println("--------------Account Open----------------");
			
			
			 
			   System.out.print("Enter your name: ");
			  	 name=sc.next();
			   
			   System.out.println("Enter your House name: ");
			   housename=sc.next();
			   System.out.println("Enter your city: ");
			   city=sc.next();
			   System.out.println("Enter your state: ");
			   state=sc.next();
			   System.out.println("Enter your country: ");
			    country = sc.next();
			   System.out.print("Enter your age: ");
			   age=sc.nextInt();
			  
			   System.out.print("Enter your phone number: ");
			   contactNumber=sc.next();
			   if(contactNumber.length()!=10) {
				  System.out.println("invalid");  
			   }
			   System.out.print("Enter Amount: ");
			   amount=sc.nextInt();
				if(amount<1000|| contactNumber.length()!=10) {
					System.out.println("can't open account");
				}
				else {
					ArrayList<Account> ac = new ArrayList<Account>();
					 
					
					System.out.println("Enter 1 for saving: ");
					System.out.println("Enter 2 for current: ");
					System.out.println("Enter 3 for fixed deposit: ");
					System.out.println("Enter your account type: ");
				    int t11 = sc.nextInt();
				switch(t11) {
				case 1:
					ac.add(new Account(AccountType.SAVING,amount));
				       i++;
						a++;
						j++;
					
					break;
				case 2:
					ac.add(new Account(AccountType.CURRENT,amount));
					  i++;
						a++;
						j++;
					break;
				case 3:
					ac.add(new Account(AccountType.FIXEDDEPOSIT,amount));
					  i++;
						a++;
						j++;
					break;
				default:
					break;
				}
				
				
				 
				Address add=new Address(housename,city,state,country)	 ;
				
				Customer cus4=new Customer(name, age, add, contactNumber);
				
				 
				 cus.put(a, cus4);
				 
				 for (Account c : ac) {
	             c.addCustomer(cus4);
				 }
				 
				
				 
				 ban.addAccount(ac);
				 if(age<18) {
					 System.out.println("minor account");
				 }
				 System.out.println("--------------sucessful----------------");
				 System.out.println("your Account number is"+i);
				 System.out.println("your customerid is"+a);
				System.out.println("your account id"+j);
				
				 acc.put(i,ac);
				 try {
					  File file=new File("Account.txt");
					  FileOutputStream fos = new FileOutputStream(file,true);
					  ObjectOutputStream oos = new ObjectOutputStream(fos);
					  oos.writeObject( acc);
					  oos.writeObject( cus);
					  oos.writeObject( loa1);
			          oos.flush();
					  oos.close();
					  fos.close();
					  }
					  catch(IOException e) {
					  	e.printStackTrace();
					  }
				  
				  try {
					  File file1=new File("Customer.txt");
					  FileOutputStream fos1 = new FileOutputStream(file1,true);
					  ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
					 // oos.writeObject( acc);
					  oos1.writeObject( cus);
					 // oos.writeObject( loa1);
			          oos1.flush();
					  oos1.close();
					  
					  }
					  catch(IOException e) {
					  	e.printStackTrace();
					  }  
			            
				  try {
					  File file2=new File("Loan.txt");
					  FileOutputStream fos2 = new FileOutputStream(file2,true);
					  ObjectOutputStream oos2 = new ObjectOutputStream(fos2);
					  //oos.writeObject( acc);
					  //oos.writeObject( cus);
					  oos2.writeObject( loa1);
			          oos2.flush();
					  oos2.close();
					  
					  }
					  catch(IOException e) {
					  	e.printStackTrace();
					  }
				}
				 break;
	
	case 5:
			System.out.println("--------------Deposit----------------");
			found=false;
			System.out.print("Enter your account number: ");
			accountnumber=sc.nextInt();
			
			

                for(Map.Entry<Integer,ArrayList<Account>> me1 : account) 
                    
                	 
                		 for(Account entry :me1.getValue()) {
                			 if(accountnumber==entry.getAccountnumber()) {
                			 found=true;
         					System.out.println("accountType:"+entry.getAccountType());
         					System.out.println("balance: "+entry.getBalance());
         					
         					System.out.println("\nEnter amount to deposit: ");
         					amt=sc.nextInt();
         					entry.setBalance(entry.getBalance()+amt);
         					System.out.println("Deposite sucessfully....! ");
         					System.out.println(entry.getBalance());
         					break;
         				}
         			}
                if(!found){
    				System.out.print("invalid ");
    			}
                		 
                		 
                	 
                    	/*for(Account accc: ban.getAccount()){
                    	
                    		if(accountnumber==accc.getAccountnumber()) {
            					found=true;
            					System.out.println("accountType:"+accc.getAccountType());
            					System.out.println("balance: "+accc.getBalance());
            					
            					System.out.println("\nEnter amount to deposit: ");
            					amt=sc.nextInt();
            					accc.setBalance(accc.getBalance()+amt);
            					System.out.println("Deposite sucessfully....! ");
            					System.out.println(accc.getBalance());
            					break;
            				}
            			}
            			if(!found){
            				System.out.print("invalid ");
            			}
                    	*/
                    

			
                try {
      			  File file=new File("Account.txt");
      			  FileOutputStream fos = new FileOutputStream(file,true);
      			  ObjectOutputStream oos = new ObjectOutputStream(fos);
      			  oos.writeObject( acc);
      			  oos.writeObject( cus);
      			  oos.writeObject( loa1);
      	          oos.flush();
      			  oos.close();
      			  fos.close();
      			  }
      			  catch(IOException e) {
      			  	e.printStackTrace();
      			  }
      		  
      		  try {
      			  File file1=new File("Customer.txt");
      			  FileOutputStream fos1 = new FileOutputStream(file1,true);
      			  ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
      			 // oos.writeObject( acc);
      			  oos1.writeObject( cus);
      			 // oos.writeObject( loa1);
      	          oos1.flush();
      			  oos1.close();
      			  
      			  }
      			  catch(IOException e) {
      			  	e.printStackTrace();
      			  }  
      	            
      		  try {
      			  File file2=new File("Loan.txt");
      			  FileOutputStream fos2 = new FileOutputStream(file2,true);
      			  ObjectOutputStream oos2 = new ObjectOutputStream(fos2);
      			  //oos.writeObject( acc);
      			  //oos.writeObject( cus);
      			  oos2.writeObject( loa1);
      	          oos2.flush();
      			  oos2.close();
      			  
      			  }
      			  catch(IOException e) {
      			  	e.printStackTrace();
      			  }
      	      
			
			
			
	break;
	case 6:
			System.out.println("--------------Withdraw----------------");
			found=false;
			System.out.print("Enter your account id : ");
			 accountnumber=sc.nextInt();
			
			
              for(Map.Entry<Integer,ArrayList<Account>> me1 : account) 
                    
                    	for(Account entry :me1.getValue()) {
                    		
                			 if(accountnumber==entry.getAccountnumber()) {
                				 found=true;
        					System.out.println("accountType:"+entry.getAccountType());
        					System.out.println("balance: "+entry.getBalance());
        					System.out.print("\nEnter amount to withdraw: ");
        					amt=sc.nextInt();
        					if(amt<entry.getBalance()){
        					  entry.setBalance(entry.getBalance()-amt);
        					  System.out.println("withdraw sucessfully....! ");
        					  System.out.println(entry.getBalance());
        					}
        					else{
        						System.out.print("error ");
        					}
        					break;
        				}
        				}
        		
              if(!found){
  				System.out.print("invalid ");
  			}
                    	
                    
                     
                    /*	for(Account accc: ban.getAccount()){
                    		 if(accountnumber==accc.getAccountnumber()) {
            					found=true;
            					System.out.println("accountType:"+accc.getAccountType());
            					System.out.println("balance: "+accc.getBalance());
            					System.out.print("\nEnter amount to withdraw: ");
            					amt=sc.nextInt();
            					if(amt<accc.getBalance()){
            					  accc.setBalance(accc.getBalance()-amt);
            					  System.out.print("withdraw sucessfully....! ");
            					  System.out.println(accc.getBalance());
            					}
            					else{
            						System.out.print("error ");
            					}
            					break;
            				}
            					
            				}
            			
            			if(!found){
            				System.out.print("invalid ");
            			}
                    	*/
			
			
              try {
    			  File file=new File("Account.txt");
    			  FileOutputStream fos = new FileOutputStream(file,true);
    			  ObjectOutputStream oos = new ObjectOutputStream(fos);
    			  oos.writeObject( acc);
    			  oos.writeObject( cus);
    			  oos.writeObject( loa1);
    	          oos.flush();
    			  oos.close();
    			  fos.close();
    			  }
    			  catch(IOException e) {
    			  	e.printStackTrace();
    			  }
    		  
    		  try {
    			  File file1=new File("Customer.txt");
    			  FileOutputStream fos1 = new FileOutputStream(file1,true);
    			  ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
    			 // oos.writeObject( acc);
    			  oos1.writeObject( cus);
    			 // oos.writeObject( loa1);
    	          oos1.flush();
    			  oos1.close();
    			  
    			  }
    			  catch(IOException e) {
    			  	e.printStackTrace();
    			  }  
    	            
    		  try {
    			  File file2=new File("Loan.txt");
    			  FileOutputStream fos2 = new FileOutputStream(file2,true);
    			  ObjectOutputStream oos2 = new ObjectOutputStream(fos2);
    			  //oos.writeObject( acc);
    			  //oos.writeObject( cus);
    			  oos2.writeObject( loa1);
    	          oos2.flush();
    			  oos2.close();
    			  
    			  }
    			  catch(IOException e) {
    			  	e.printStackTrace();
    			  }
    	      
        			
			
	break;
	case 7:
		//class DateTimeParseException extends Exception {
			
			//private static final long serialVersionUID = 1L;

			//public DateTimeParseException(String msg) {
			  //  super(msg);
			//}}
		
		System.out.println("--------------TRANSFER MONEY----------------");
		found=false;
		
		System.out.print("Enter from account number: ");
		accountnumber=sc.nextInt();
		System.out.print("Enter your account number TO TRANSFER: ");
        int accountnumber1=sc.nextInt();
        System.out.print("\nEnter amount to transfer: ");
        amt=sc.nextInt();
      
        System.out.print("\nEnter Today's date(Date format:yyyy-mm-dd): ");
	 
       
        String dateString =sc.next();
        if(dateString.length()!=10) {
        	 System.out.print("\nIncorrect format Enter Today's date(Date format:yyyy-mm-dd):\n ");
        }    
        else {
      	
      
     LocalDate date = LocalDate.parse(dateString);
	 
	//LocalDate date = LocalDate.parse(sc.next()); 
	
		
      
    try {
      Transfer transfer = new Transfer(accountnumber, accountnumber1, amt, date);
      transfer.transfer(accountnumber, accountnumber1, amt);
      ArrayList<Transfer> tra=new ArrayList<Transfer>();               		 
      tra.add(transfer);
      
      
      for(Map.Entry<Integer,ArrayList<Account>> me2 : account) 
	   
	
	 
      for (Account c : me2.getValue()) {
	   c.addTransfer(tra);
		 }
    
      try {
		  File file=new File("Account.txt");
		  FileOutputStream fos = new FileOutputStream(file,true);
		  ObjectOutputStream oos = new ObjectOutputStream(fos);
		  oos.writeObject( acc);
		  oos.writeObject( cus);
		  oos.writeObject( loa1);
          oos.flush();
		  oos.close();
		  fos.close();
		  }
		  catch(IOException e) {
		  	e.printStackTrace();
		  }
	  
	  try {
		  File file1=new File("Customer.txt");
		  FileOutputStream fos1 = new FileOutputStream(file1,true);
		  ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
		 // oos.writeObject( acc);
		  oos1.writeObject( cus);
		 // oos.writeObject( loa1);
          oos1.flush();
		  oos1.close();
		  
		  }
		  catch(IOException e) {
		  	e.printStackTrace();
		  }  
            
	  try {
		  File file2=new File("Loan.txt");
		  FileOutputStream fos2 = new FileOutputStream(file2,true);
		  ObjectOutputStream oos2 = new ObjectOutputStream(fos2);
		  //oos.writeObject( acc);
		  //oos.writeObject( cus);
		  oos2.writeObject( loa1);
          oos2.flush();
		  oos2.close();
		  
		  }
		  catch(IOException e) {
		  	e.printStackTrace();
		  }
      
	 
      
	
	} catch (IllegalDateException e) {
	    System.out.println("Invalid date format: " + e.getMessage());
	    e.printStackTrace();
	
	  }
       
        }
	break;
case 8:
		
		Integer l=5;
		
			System.out.println("--------------TAKE LOAN----------------");
			
			
			 
			   System.out.print("Enter your ACCOUNT ID: ");
			   int accid=sc.nextInt();
			   for(Map.Entry<Integer,ArrayList<Account>> me1 : account) 
			   if(accid==me1.getKey()) {
		
			               System.out.println("Enter AMOUNT: ");
			               double amt1 =sc.nextInt();
			               System.out.println("Enter YEAR: ");
			               int year=sc.nextInt();
			   
			              if(amt1<1000) {
					         System.out.println("can't open account");
				           }
				         else {
					         ArrayList<Loan> loa4 = new ArrayList<Loan>();
					 
					
					         System.out.println("Enter 1 for Housing: ");
					         System.out.println("Enter 2 for Vehicle: ");
					         System.out.println("Enter 3 for Personal: ");
					         System.out.println("Enter your Loan type: ");
				             int l11 = sc.nextInt();
				             switch(l11) {
				               case 1:
					              loa4.add(new Loan(LoanType.HOUSING,amt1,year));
				                  l++;
					              break;
				               case 2:
					              loa4.add(new Loan(LoanType.VEHICLE,amt1,year));
				                  l++;
					              break;
					
				              case 3:
					             loa4.add(new Loan(LoanType.PERSONAL,amt1,year));
				                  l++;
					             break;
				              default:
					             break;
				             }
				
				             ho.addLoan(loa4);
			        
		          
		                     loa1.put(l, lon1);
				 
				
				 
		                    for (Account c : me1.getValue()) {
		                 
		                                c.addLoan(loa4);    
		                 
		                       }
				
				 
				 
				            System.out.println("--------------sucessful----------------");
				            System.out.println("your loan id"+l);
				         }}else {
					System.out.println("invalid");
				}
			   try {
					  File file=new File("Account.txt");
					  FileOutputStream fos = new FileOutputStream(file,true);
					  ObjectOutputStream oos = new ObjectOutputStream(fos);
					  oos.writeObject( acc);
					  
			          oos.flush();
					  oos.close();
					  fos.close();
					  }
					  catch(IOException e) {
					  	e.printStackTrace();
					  }
				  
				  try {
					  File file1=new File("Customer.txt");
					  FileOutputStream fos1 = new FileOutputStream(file1,true);
					  ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
					 // oos.writeObject( acc);
					  oos1.writeObject( cus);
					 // oos.writeObject( loa1);
			          oos1.flush();
					  oos1.close();
					  
					  }
					  catch(IOException e) {
					  	e.printStackTrace();
					  }  
			            
				  try {
					  File file2=new File("Loan.txt");
					  FileOutputStream fos2 = new FileOutputStream(file2,true);
					  ObjectOutputStream oos2 = new ObjectOutputStream(fos2);
					  //oos.writeObject( acc);
					  //oos.writeObject( cus);
					  oos2.writeObject( loa1);
			          oos2.flush();
					  oos2.close();
					  
					  }
					  catch(IOException e) {
					  	e.printStackTrace();
					  }
			      
		break;
		
	case 9:
		System.out.println("--------------LOAN PAYMENT----------------");
		found=false;
		System.out.print("Enter your LOAN ID: ");
		int loaid=sc.nextInt();
		
		

            for(Map.Entry<Integer,ArrayList<Loan>> me2 : loan) 
                
            	
            		 for(Loan entry :me2.getValue()) {
            			 if(loaid==entry.getLoanid()) {
            			found=true;
     					System.out.println("accountType:"+entry.getLoanType());
     					System.out.println("balance: "+entry.getLoanAmount());
     					
     					System.out.println("\nEnter amount to pay: ");
     					amt=sc.nextInt();
     					entry.setLoanAmount(entry.getLoanAmount()-amt);
     					System.out.println("Payment sucessfully....! ");
     					System.out.println("Balance loan amount to pay"+entry.getLoanAmount());
     					break;
     				}
     			}
            	 if(!found){
     				System.out.print("invalid ");
     			}
            		 
            
		
            	 try {
       			  File file=new File("Account.txt");
       			  FileOutputStream fos = new FileOutputStream(file,true);
       			  ObjectOutputStream oos = new ObjectOutputStream(fos);
       			  oos.writeObject( acc);
       			 
       	          oos.flush();
       			  oos.close();
       			  fos.close();
       			  }
       			  catch(IOException e) {
       			  	e.printStackTrace();
       			  }
       		  
       		  try {
       			  File file1=new File("Customer.txt");
       			  FileOutputStream fos1 = new FileOutputStream(file1,true);
       			  ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
       			 // oos.writeObject( acc);
       			  oos1.writeObject( cus);
       			 // oos.writeObject( loa1);
       	          oos1.flush();
       			  oos1.close();
       			  
       			  }
       			  catch(IOException e) {
       			  	e.printStackTrace();
       			  }  
       	            
       		  try {
       			  File file2=new File("Loan.txt");
       			  FileOutputStream fos2 = new FileOutputStream(file2,true);
       			  ObjectOutputStream oos2 = new ObjectOutputStream(fos2);
       			  //oos.writeObject( acc);
       			  //oos.writeObject( cus);
       			  oos2.writeObject( loa1);
       	          oos2.flush();
       			  oos2.close();
       			  
       			  }
       			  catch(IOException e) {
       			  	e.printStackTrace();
       			  }
       	      
		
		break;
	
	case 10:
		System.out.println("--------------Balance enquiry------------");
		found=false;
		System.out.print("Enter your account number: ");
		accountnumber=sc.nextInt();
		
		for(Map.Entry<Integer,ArrayList<Account>> me2 : account) 
            
        	
   		 for(Account entry :me2.getValue()) {
   			 if(accountnumber==entry.getAccountnumber()) {
   			found=true;
   			
			System.out.println("accountType:"+entry.getAccountType());
			System.out.println("balance: "+entry.getBalance());
			
				break;
			}
		}
   	 if(!found){
			System.out.print("invalid ");
		}
   		 
   
		
		
		/*try {

            FileInputStream fis = new FileInputStream("Account.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            HashMap<Integer,ArrayList<Account>> cus21 =new HashMap<Integer,ArrayList<Account>> ();
            cus21 = (HashMap<Integer,ArrayList<Account>>)ois.readObject();
            ois.close();
            Set<Map.Entry<Integer,ArrayList<Account>>> ppp =cus21.entrySet();
            for(Map.Entry<Integer,ArrayList<Account>> me1 : ppp) 
            {
            	
            	for(Account entry :me1.getValue()) {
            		if(accountnumber==entry.getAccountnumber()){
            			found=true;
    					System.out.println("accountType:"+entry.getAccountType());
    					System.out.println("balance: "+entry.getBalance());
    					break;
            		
            			
            	}
            }
            if(!found){
 				System.out.print("invalid ");
 			}}
                	/*for(Account accc: Bank.getAccount()){
                		 if(accountnumber==accc.getAccountnumber()) {
                			
        					found=true;
        					System.out.println("accountType:"+accc.getAccountType());
        					System.out.println("balance: "+accc.getBalance());
        					break;
         				}
         			}
         			if(!found){
         				System.out.print("invalid ");
         			}*/
                	
                

		/*} catch(Exception e) {
            e.printStackTrace();
      }*/
		
	
	break;
	case 11:
		System.out.println("--------------TRANSACTION HISTORY----------------");
		System.out.println("Enter account number");
		accountnumber=sc.nextInt();
		
		 
		 for(Map.Entry<Integer,ArrayList<Account>> me1 : account) 
             
         	for(Account entry :me1.getValue()) {
         		
     			 if(accountnumber==entry.getAccountnumber()) {
     				found=true;
					System.out.println("Transfer History:"+entry.getTransfer());
     			 }}
		
		
		
		
		break;
	
	
	
	
	
	default:
		System.out.println("-----------------Thank you-------------");
	break;
	}
	}while(u>0);
	break;
case 3:
	System.out.println("Invalid ");
	break;
}
}while(w>0);
          ois.close();		 
          ois1.close();
          ois2.close();
		  } catch(IOException e) {
		  	e.printStackTrace();
		  } catch (ClassNotFoundException e1) {
			
			e1.printStackTrace();
		}	  
}

	
 }		
 




